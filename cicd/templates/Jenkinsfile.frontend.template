/* groovylint-disable-next-line CompileStatic */
String version

// use kubernetes podTemplate
podTemplate(
    yaml: readTrusted(path: 'pod.yaml')
// Note that for frontend project, there's a problem about node_modules/ folder cleanup,
// so we do not mount workspace volume here
// workspaceVolume: persistentVolumeClaimWorkspaceVolume(claimName: 'jenkins-workspace-pv-claim', readOnly: false)
) {
    node(POD_LABEL) {
        stage('Checkout') {
            echo '========Executing Checkout========'

            checkout scm

            always {
                echo '========Checkout finished========'
            }
        }

        stage('Gitversion') {
            echo '========Git version========'
            container('gitversion') {
                /* groovylint-disable-next-line LineLength */
                version = sh(
                    script:'/tools/dotnet-gitversion /showvariable InformationalVersion',
                    returnStdout: true
                ).trim()
            }

            echo "========Version: ${version}========"
            currentBuild.displayName = "#${env.BUILD_ID} v${version}"
        }

        stage('Install') {
            container('node') {
                /*
                   Note: there is a bug that npm:reify:createSparse
                   will take a long time which make npm install very slow
                   The workaround is mkdir node_modules before exec npm install
                   See https://github.com/npm/cli/issues/3208 for more information
                 */
                sh 'mkdir node_modules'

                /* set the version in package.json with ${version} variable */
                sh "npm --no-git-tag-version version ${version}"

                /* use concurrently for multi-apps project, ignore it if it's single app */
                sh 'npm install concurrently -g'
                sh 'npm install'
            }

            always {
                echo '========npm install finished========'
            }
            onFailure {
                echo '========npm install execution failed========'
            }
        }

        stage('Build') {
            container('node') {
                /* export CI=false for React apps, otherwise it will threat warnings as errors */
                /*
                   The -- after npm run build is needed
                   as it represents the contents after it are arguments for the command
                */
                // sh 'export CI=false && npm run build -- --configuration=production'

                /* groovylint-disable-next-line LineLength */
                sh 'concurrently --kill-others-on-fail "npm run build -- qna-client --configuration=production" "npm run build -- qna-ops --configuration=production"'
            }

            always {
                echo '========npm run build finished========'
            }
            onFailure {
                echo '========npm run build execution failed========'
            }
        }

        stage('Bake Docker image') {
            container('docker') {
                echo '========docker-compose========'
                /* groovylint-disable-next-line GStringExpressionWithinString */
                // sh 'curl -XPOST -v --unix-socket /var/run/docker.sock http://localhost/build'
                // sh 'docker build -t cepheus990910/jenkins-sample-spring-boot:${env.BUILD_ID} .'
                docker.withRegistry('', 'cepheus990910') {
                    // customImage = docker.build("cepheus990910/jenkins-sample-spring-boot:${version}")
                    // customImage.push()
                    sh "export VERSION_TAG=${version} \
                       && docker compose -f docker-compose.yml build \
                       && docker compose -f docker-compose.yml push"
                }
            }
        }
    }
}
